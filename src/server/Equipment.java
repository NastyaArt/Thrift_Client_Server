/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server;

//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-02")
public class Equipment implements org.apache.thrift.TBase<Equipment, Equipment._Fields>, java.io.Serializable, Cloneable, Comparable<Equipment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Equipment");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COST_FIELD_DESC = new org.apache.thrift.protocol.TField("cost", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("producer", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECEIPT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptDate", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EquipmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EquipmentTupleSchemeFactory();

  public int code; // required
  public java.lang.String category; // required
  public java.lang.String name; // required
  public int cost; // required
  public java.lang.String producer; // required
  public java.lang.String receiptDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    CATEGORY((short)2, "category"),
    NAME((short)3, "name"),
    COST((short)4, "cost"),
    PRODUCER((short)5, "producer"),
    RECEIPT_DATE((short)6, "receiptDate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // CATEGORY
          return CATEGORY;
        case 3: // NAME
          return NAME;
        case 4: // COST
          return COST;
        case 5: // PRODUCER
          return PRODUCER;
        case 6: // RECEIPT_DATE
          return RECEIPT_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private static final int __COST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COST, new org.apache.thrift.meta_data.FieldMetaData("cost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PRODUCER, new org.apache.thrift.meta_data.FieldMetaData("producer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIPT_DATE, new org.apache.thrift.meta_data.FieldMetaData("receiptDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Equipment.class, metaDataMap);
  }

  public Equipment() {
  }

  public Equipment(
    int code,
    java.lang.String category,
    java.lang.String name,
    int cost,
    java.lang.String producer,
    java.lang.String receiptDate)
  {
    this();
    this.code = code;
    setCodeIsSet(true);
    this.category = category;
    this.name = name;
    this.cost = cost;
    setCostIsSet(true);
    this.producer = producer;
    this.receiptDate = receiptDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Equipment(Equipment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.code = other.code;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.cost = other.cost;
    if (other.isSetProducer()) {
      this.producer = other.producer;
    }
    if (other.isSetReceiptDate()) {
      this.receiptDate = other.receiptDate;
    }
  }

  public Equipment deepCopy() {
    return new Equipment(this);
  }

  @Override
  public void clear() {
    setCodeIsSet(false);
    this.code = 0;
    this.category = null;
    this.name = null;
    setCostIsSet(false);
    this.cost = 0;
    this.producer = null;
    this.receiptDate = null;
  }

  public int getCode() {
    return this.code;
  }

  public Equipment setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
    return this;
  }

  public void unsetCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CODE_ISSET_ID, value);
  }

  public java.lang.String getCategory() {
    return this.category;
  }

  public Equipment setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public Equipment setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCost() {
    return this.cost;
  }

  public Equipment setCost(int cost) {
    this.cost = cost;
    setCostIsSet(true);
    return this;
  }

  public void unsetCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COST_ISSET_ID);
  }

  /** Returns true if field cost is set (has been assigned a value) and false otherwise */
  public boolean isSetCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COST_ISSET_ID);
  }

  public void setCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COST_ISSET_ID, value);
  }

  public java.lang.String getProducer() {
    return this.producer;
  }

  public Equipment setProducer(java.lang.String producer) {
    this.producer = producer;
    return this;
  }

  public void unsetProducer() {
    this.producer = null;
  }

  /** Returns true if field producer is set (has been assigned a value) and false otherwise */
  public boolean isSetProducer() {
    return this.producer != null;
  }

  public void setProducerIsSet(boolean value) {
    if (!value) {
      this.producer = null;
    }
  }

  public java.lang.String getReceiptDate() {
    return this.receiptDate;
  }

  public Equipment setReceiptDate(java.lang.String receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  public void unsetReceiptDate() {
    this.receiptDate = null;
  }

  /** Returns true if field receiptDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiptDate() {
    return this.receiptDate != null;
  }

  public void setReceiptDateIsSet(boolean value) {
    if (!value) {
      this.receiptDate = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((java.lang.Integer)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case COST:
      if (value == null) {
        unsetCost();
      } else {
        setCost((java.lang.Integer)value);
      }
      break;

    case PRODUCER:
      if (value == null) {
        unsetProducer();
      } else {
        setProducer((java.lang.String)value);
      }
      break;

    case RECEIPT_DATE:
      if (value == null) {
        unsetReceiptDate();
      } else {
        setReceiptDate((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case CATEGORY:
      return getCategory();

    case NAME:
      return getName();

    case COST:
      return getCost();

    case PRODUCER:
      return getProducer();

    case RECEIPT_DATE:
      return getReceiptDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case CATEGORY:
      return isSetCategory();
    case NAME:
      return isSetName();
    case COST:
      return isSetCost();
    case PRODUCER:
      return isSetProducer();
    case RECEIPT_DATE:
      return isSetReceiptDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Equipment)
      return this.equals((Equipment)that);
    return false;
  }

  public boolean equals(Equipment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cost = true;
    boolean that_present_cost = true;
    if (this_present_cost || that_present_cost) {
      if (!(this_present_cost && that_present_cost))
        return false;
      if (this.cost != that.cost)
        return false;
    }

    boolean this_present_producer = true && this.isSetProducer();
    boolean that_present_producer = true && that.isSetProducer();
    if (this_present_producer || that_present_producer) {
      if (!(this_present_producer && that_present_producer))
        return false;
      if (!this.producer.equals(that.producer))
        return false;
    }

    boolean this_present_receiptDate = true && this.isSetReceiptDate();
    boolean that_present_receiptDate = true && that.isSetReceiptDate();
    if (this_present_receiptDate || that_present_receiptDate) {
      if (!(this_present_receiptDate && that_present_receiptDate))
        return false;
      if (!this.receiptDate.equals(that.receiptDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + code;

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + cost;

    hashCode = hashCode * 8191 + ((isSetProducer()) ? 131071 : 524287);
    if (isSetProducer())
      hashCode = hashCode * 8191 + producer.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceiptDate()) ? 131071 : 524287);
    if (isSetReceiptDate())
      hashCode = hashCode * 8191 + receiptDate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Equipment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCost()).compareTo(other.isSetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cost, other.cost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProducer()).compareTo(other.isSetProducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producer, other.producer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiptDate()).compareTo(other.isSetReceiptDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiptDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptDate, other.receiptDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Equipment(");
    boolean first = true;

    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cost:");
    sb.append(this.cost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("producer:");
    if (this.producer == null) {
      sb.append("null");
    } else {
      sb.append(this.producer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiptDate:");
    if (this.receiptDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receiptDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EquipmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EquipmentStandardScheme getScheme() {
      return new EquipmentStandardScheme();
    }
  }

  private static class EquipmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Equipment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Equipment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = iprot.readI32();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cost = iprot.readI32();
              struct.setCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producer = iprot.readString();
              struct.setProducerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECEIPT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiptDate = iprot.readString();
              struct.setReceiptDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Equipment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(struct.code);
      oprot.writeFieldEnd();
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COST_FIELD_DESC);
      oprot.writeI32(struct.cost);
      oprot.writeFieldEnd();
      if (struct.producer != null) {
        oprot.writeFieldBegin(PRODUCER_FIELD_DESC);
        oprot.writeString(struct.producer);
        oprot.writeFieldEnd();
      }
      if (struct.receiptDate != null) {
        oprot.writeFieldBegin(RECEIPT_DATE_FIELD_DESC);
        oprot.writeString(struct.receiptDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EquipmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EquipmentTupleScheme getScheme() {
      return new EquipmentTupleScheme();
    }
  }

  private static class EquipmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Equipment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Equipment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetCategory()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetCost()) {
        optionals.set(3);
      }
      if (struct.isSetProducer()) {
        optionals.set(4);
      }
      if (struct.isSetReceiptDate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCost()) {
        oprot.writeI32(struct.cost);
      }
      if (struct.isSetProducer()) {
        oprot.writeString(struct.producer);
      }
      if (struct.isSetReceiptDate()) {
        oprot.writeString(struct.receiptDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Equipment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.code = iprot.readI32();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cost = iprot.readI32();
        struct.setCostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.producer = iprot.readString();
        struct.setProducerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.receiptDate = iprot.readString();
        struct.setReceiptDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

